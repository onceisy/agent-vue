#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 20m;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        #listen 443 ssl;
        #server_name  localhost;
        server_name  localhost;
        # ssl_certificate /simpleconnect.jp.pem;
        # ssl_certificate_key /simpleconnect.jp.dv.key;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html;
          #  proxy_set_header Host $host;
            try_files $uri $uri/ /index.html;
        }

        #location /v2/ {
        #        proxy_pass http://ai-platform-app/v2/;
                #   指定允许跨域的方法，*代表所有
        #        add_header Access-Control-Allow-Methods *;
                #   预检命令的缓存，如果不缓存每次会发送两次请求
        #        add_header Access-Control-Max-Age 3600;
                #add_header Access-Control-Max-Age 1728000;
                #   带cookie请求需要加上这个字段，并设置为true
                #add_header Access-Control-Allow-Credentials true;
                #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
                #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
        #        add_header Access-Control-Allow-Origin *;
                #add_header Access-Control-Allow-Origin $http_origin;
                #  表示请求头的字段 动态获取
                #add_header Access-Control-Allow-Headers $http_access_control_request_headers;
                #  OPTIONS预检命令，预检命令通过时才发送请求
                #  检查请求的类型是不是预检命令
        #        if ($request_method = OPTIONS){
        #            return 200;
        #        }
        #        rewrite "^/v2/(.*)$" /$1 break;
        #}

        location /agent/ {
            proxy_pass http://chat-task-based/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            chunked_transfer_encoding on;
            proxy_buffering off;
            proxy_pass_header Server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
        }

        #location /baserow/ {
        #    proxy_pass http://baserow/;
        #    proxy_set_header Host $host;
        #    proxy_set_header X-Real-IP $remote_addr;
        #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
